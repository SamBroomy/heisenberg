name: CI Pipeline

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # Use consistent versions across all jobs
  RUST_CACHE_KEY_PREFIX: "ci"

jobs:
  lint:
    name: Lint & Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: rustfmt, clippy
      - name: Install just
        uses: extractions/setup-just@v3

      - name: Install tools
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-machete,cargo-audit

      - name: Setup Python and uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
          prefix-key: ${{ env.RUST_CACHE_KEY_PREFIX }}

      - name: Install Python dependencies
        run: uv sync --locked --dev

      - name: Run linting
        run: |
          just ci-lint

  test:
    name: Test (${{ matrix.os }}, Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.10", "3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@nightly

      - name: Install just
        uses: extractions/setup-just@v3

      - name: Setup Python and uv
        uses: astral-sh/setup-uv@v5
        with:
          python-version: ${{ matrix.python-version }}
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
          prefix-key: ${{ env.RUST_CACHE_KEY_PREFIX }}
          key: ${{ matrix.os }}-${{ matrix.python-version }}

      - name: Install dependencies
        run: uv sync --locked --dev

      - name: Run tests
        run: just test

      - name: Cleanup uv cache
        run: uv cache prune --ci

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@nightly

      - name: Install cargo-audit
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-audit

      - name: Setup Python and uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Install dependencies
        run: uv sync --locked --dev

      - name: Rust security audit
        run: just cargo-audit

      - name: Python security audit
        run: |
          # Export dependencies and audit them
          uv export --no-hashes --format requirements-txt > /tmp/requirements-audit.txt
          uvx pip-audit --requirement /tmp/requirements-audit.txt --desc --cache-dir /tmp/pip-audit-cache

  build-test:
    name: Build Test (PR only)
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@nightly

      - name: Install just
        uses: extractions/setup-just@v3

      - name: Setup Python and uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
          prefix-key: ${{ env.RUST_CACHE_KEY_PREFIX }}

      - name: Install dependencies
        run: uv sync --locked --dev

      - name: Test publishing (dry run)
        run: just publish-dry-run

      - name: Test Python package build
        run: |
          just build-python
          uv tool install twine
          uvx twine check target/wheels/*
