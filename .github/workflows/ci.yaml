name: CI Pipeline

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # Use consistent versions across all jobs
  RUST_CACHE_KEY_PREFIX: "shared"
  CARGO_BUILD_JOBS: 1
  CARGO_PROFILE_TEST_OPT_LEVEL: 1 # Optimize test builds
  CARGO_PROFILE_TEST_DEBUG: 0 # Reduce debug info

jobs:
  build:
    name: Build Rust Dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup environment
        uses: ./.github/actions/setup
        with:
          rust-toolchain: nightly
          cache-prefix: ${{ env.RUST_CACHE_KEY_PREFIX }}

      - name: Build Rust dependencies
        run: |
          echo "=== Pre-build cache state ==="
          ls -la target/ || echo "No target directory"
          echo "=== Building dependencies ==="
          just rust-build-deps
          echo "=== Post-build cache state ==="
          ls -la target/
        env:
          USE_TEST_DATA: true

  lint:
    name: Lint & Format
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Setup environment
        uses: ./.github/actions/setup
        with:
          rust-toolchain: nightly
          cache-prefix: ${{ env.RUST_CACHE_KEY_PREFIX }}
          install-tools: cargo-machete,cargo-audit

      - name: Run linting
        run: just ci-lint

  rust-test:
    name: Rust Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Setup environment
        uses: ./.github/actions/setup
        with:
          rust-toolchain: nightly
          cache-prefix: ${{ env.RUST_CACHE_KEY_PREFIX }}

      - name: Run Rust tests
        run: |
          echo "=== Pre-test cache state ==="
          ls -la target/ || echo "No target directory"
          echo "=== Running tests ==="
          just rust-test-ci
        env:
          USE_TEST_DATA: true

  python-test:
    name: Python Tests (${{ matrix.os }}, Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    needs: [lint, rust-test]
    strategy:
      fail-fast: false
      matrix:
        # Only test essential platforms and Python versions in CI
        include:
          - os: ubuntu-latest
            python-version: "3.12"
          - os: ubuntu-latest
            python-version: "3.8" # Minimum supported version
          - os: windows-latest
            python-version: "3.12" # One Windows test
          - os: macos-latest
            python-version: "3.12" # One macOS test

    steps:
      - uses: actions/checkout@v4

      - name: Setup environment
        uses: ./.github/actions/setup
        with:
          rust-toolchain: nightly
          python-version: ${{ matrix.python-version }}
          cache-prefix: ${{ env.RUST_CACHE_KEY_PREFIX }}

      - name: Build Python bindings only
        run: uv run maturin develop --features python --uv
        env:
          USE_TEST_DATA: true

      - name: Run Python tests
        run: just python-test-ci
        env:
          USE_TEST_DATA: true

      - name: Cleanup uv cache
        run: uv cache prune --ci

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup environment
        uses: ./.github/actions/setup
        with:
          rust-toolchain: nightly
          cache-prefix: ${{ env.RUST_CACHE_KEY_PREFIX }}
          install-tools: cargo-audit

      - name: Run security audit
        run: just cargo-audit

  build-test:
    name: Build Test (PR only)
    runs-on: ubuntu-latest
    needs: [rust-test, python-test]
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4

      - name: Setup environment
        uses: ./.github/actions/setup
        with:
          rust-toolchain: nightly
          cache-prefix: ${{ env.RUST_CACHE_KEY_PREFIX }}

      - name: Test publishing (dry run)
        run: just publish-dry-run

      - name: Test Python package build
        run: |
          just build-python
          uv tool install twine
          uvx twine check target/wheels/*
