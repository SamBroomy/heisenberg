name: CI Pipeline

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # Use consistent versions across all jobs
  RUST_CACHE_KEY_PREFIX: "ci"
  CARGO_BUILD_JOBS: 1
  CARGO_PROFILE_TEST_OPT_LEVEL: 1 # Optimize test builds
  CARGO_PROFILE_TEST_DEBUG: 0 # Reduce debug info

jobs:
  lint:
    name: Lint & Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup environment
        uses: ./.github/actions/setup
        with:
          rust-toolchain: nightly
          cache-prefix: ${{ env.RUST_CACHE_KEY_PREFIX }}
          install-tools: cargo-machete,cargo-audit

      - name: Run linting
        run: just ci-lint

  test:
    name: Test (${{ matrix.os }}, Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4

      - name: Setup environment
        uses: ./.github/actions/setup
        with:
          rust-toolchain: nightly
          python-version: ${{ matrix.python-version }}
          cache-prefix: ${{ env.RUST_CACHE_KEY_PREFIX }}

      - name: Run tests
        run: just test

      - name: Cleanup uv cache
        run: uv cache prune --ci

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup environment
        uses: ./.github/actions/setup
        with:
          rust-toolchain: nightly
          cache-prefix: ${{ env.RUST_CACHE_KEY_PREFIX }}
          install-tools: cargo-audit

      - name: Run security audit
        run: just cargo-audit

  build-test:
    name: Build Test (PR only)
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4

      - name: Setup environment
        uses: ./.github/actions/setup
        with:
          rust-toolchain: nightly
          cache-prefix: ${{ env.RUST_CACHE_KEY_PREFIX }}

      - name: Test publishing (dry run)
        run: just publish-dry-run

      - name: Test Python package build
        run: |
          just build-python
          uv tool install twine
          uvx twine check target/wheels/*
